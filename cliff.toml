# https://git-cliff.org/docs/configuration

[changelog]
header = "# Changelog\n\n"
# https://tera.netlify.app/docs
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}]\
	(https://github.com/matatk/nu-tracker/releases/tag/v{{ version }})\
	- {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}\
		  {% if commit.scope %}**{{ commit.scope}}:** {% endif %}\
		  {{ commit.message | upper_first }} \
		  ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/matatk/nu-tracker/commit/{{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the template
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^build", group = "Builds" },
  { message = "^chore", group = "Chores" },
  { message = "^chore\\(release\\): ", skip = true },
  { message = "^ci", group = "Continuous integrations" },
  { message = "^doc", group = "Documentation" },
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug fixes" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^revert", group = "Reverts" },
  { message = "^style", group = "Code style" },
  { message = "^test", group = "Testing" },
  { body = ".*security", group = "Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
